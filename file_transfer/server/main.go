package main

import (
	"fmt"
	"io"
	"log"
	"net"
	"os"
	"sync"
)

var (
	host     = "localhost"
	port     = "8000"
	typeServ = "tcp"
	mu       sync.Mutex
)

func init() {
	fmt.Println("Hello")
}

func main() {
	// Проверяем или создаем директорию для сохранения файлов, если ее нет
	_, err := os.Stat("uploads")
	if os.IsNotExist(err) {
		err := os.Mkdir("uploads", os.ModePerm)
		if err != nil {
			log.Fatal(err)
		}

	}

	listener, err := net.Listen(typeServ, host+":"+port)
	if err != nil {
		log.Fatal(err)
	}
	defer listener.Close()

	log.Printf("Server started on %s:%s\n", host, port)

	// Подключение
	for {
		conn, err := listener.Accept()
		if err != nil {
			log.Println(err)
			continue
		}
		go handleConnection(conn)
	}
}

type File struct {
	Name string
	Path string
}

var files []File

func handleConnection(conn net.Conn) {

	// Создаем файл для сохранения данных
	filePath := "uploads/ recieved_file.jpeg"
	file, err := os.Create(filePath)
	if err != nil {
		log.Println("Error creating file:", err)
		return
	}
	defer file.Close()

	// Копируем данные из соединения в файл
	_, err = io.Copy(file, conn)
	fmt.Println(conn)
	if err != nil {
		log.Println("Error copying data:", err)
		return
	}
	log.Println("File received and saved:", filePath)
}

// Протокол передачи данных: Выберите протокол для передачи файлов между сервером и клиентами. В данном случае можно использовать TCP/IP, так как он обеспечивает надежное и устойчивое соединение для передачи файлов.
// Протокол коммуникации: Определите, как клиенты будут взаимодействовать с сервером для передачи и загрузки файлов. Например, клиенты могут отправлять команды серверу для загрузки, скачивания или удаления файлов.
// Структура данных: Определите формат сообщений, которые будут обмениваться между клиентами и сервером. Например, клиент может отправлять запросы на загрузку файла с указанием имени файла и данных файла, а сервер должен ответить подтверждением или ошибкой.
// Безопасность: Обеспечьте безопасность передачи файлов, чтобы предотвратить несанкционированный доступ к файлам и их повреждение в процессе передачи.
// Управление соединениями: Реализуйте механизмы для управления соединениями между сервером и клиентами, чтобы обеспечить стабильную работу при передаче больших файлов и при обработке множества запросов.
// Обработка ошибок: Разработайте стратегии обработки ошибок, чтобы обеспечить надежную работу системы при возникновении сетевых сбоев или ошибок в процессе передачи файлов.
// Хранение файлов: Решите, как будут храниться файлы на сервере. Например, вы можете хранить их в виде обычных файлов в файловой системе сервера или использовать базу данных для управления файлами.
// Тестирование: Проведите тестирование всей системы, чтобы убедиться, что она работает правильно и эффективно. Это включает в себя тестирование функциональности, производительности и безопасности.
